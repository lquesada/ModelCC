/*
 * ModelCC, under ModelCC Shared Software License, www.modelcc.org. Luis Quesada Torres.
 */


/*
 * ModelCCExamples.java
 *
 * Created on 21-dic-2011, 13:14:01
 */
package org.modelcc.examples.test;

import java.awt.BorderLayout;
import java.awt.Container;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import org.modelcc.examples.language.canvasdraw.CanvasDraw;
import org.modelcc.examples.language.graphdraw3d.resources.DisplayWrapper;
import org.modelcc.examples.language.graphdraw3d.Scene;
import org.modelcc.examples.language.imperativearithmetic.ImperativeArithmetic;
import org.modelcc.examples.language.simplearithmeticexpression.Expression;
import org.modelcc.io.ModelReader;
import org.modelcc.io.java.JavaModelReader;
import org.modelcc.lexer.recognizer.PatternRecognizer;
import org.modelcc.lexer.recognizer.regexp.RegExpPatternRecognizer;
import org.modelcc.metamodel.Model;
import org.modelcc.parser.Parser;
import org.modelcc.parser.ParserFactory;

/**
 * ModelCCExamples.
 * @author elezeta
 * @serial
 */
public class ModelCCExamples extends javax.swing.JFrame {

    /**
     * Serial Version ID
     */
    private static final long serialVersionUID = 31415926535897932L;
 
    /** Creates new form ModelCCExamples */
    public ModelCCExamples() {
        initComponents();
        exampleLanguageListValueChanged(new ListSelectionEvent(this,0,0,false));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        exampleLanguageList = new javax.swing.JList();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        languageDescription = new javax.swing.JEditorPane();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        evaluate = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        eachSeparately = new javax.swing.JRadioButton();
        wholeInput = new javax.swing.JRadioButton();
        inputScroll = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        outputScroll = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ModelCCExamples");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("modelccexamples"); // NOI18N

        jPanel1.setMinimumSize(new java.awt.Dimension(200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 600));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/modelcc/examples/test/logo.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Example languages:");
        jLabel2.setMaximumSize(new java.awt.Dimension(123, 25));
        jLabel2.setMinimumSize(new java.awt.Dimension(123, 25));
        jLabel2.setPreferredSize(new java.awt.Dimension(123, 25));
        jPanel3.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(172, 139));

        exampleLanguageList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "SimpleArithmeticExpression", "CanvasDraw", "ImperativeArithmetic", "GraphDraw3D" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        exampleLanguageList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        exampleLanguageList.setMaximumSize(new java.awt.Dimension(100, 34));
        exampleLanguageList.setMinimumSize(new java.awt.Dimension(100, 34));
        exampleLanguageList.setPreferredSize(new java.awt.Dimension(100, 34));
        exampleLanguageList.setSelectedIndex(0);
        exampleLanguageList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                exampleLanguageListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(exampleLanguageList);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel8.setMaximumSize(new java.awt.Dimension(5, 32767));
        jPanel8.setMinimumSize(new java.awt.Dimension(5, 100));
        jPanel8.setPreferredSize(new java.awt.Dimension(5, 659));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel8, java.awt.BorderLayout.LINE_END);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jPanel4.setPreferredSize(new java.awt.Dimension(824, 680));
        jPanel4.setLayout(new java.awt.GridLayout(3, 0));

        jPanel5.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Language description:");
        jLabel3.setMaximumSize(new java.awt.Dimension(137, 25));
        jLabel3.setMinimumSize(new java.awt.Dimension(137, 25));
        jLabel3.setPreferredSize(new java.awt.Dimension(137, 25));
        jPanel5.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        languageDescription.setBackground(new java.awt.Color(252, 252, 252));
        languageDescription.setContentType("text/html");
        languageDescription.setEditable(false);
        jScrollPane2.setViewportView(languageDescription);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5);

        jPanel9.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Input:");
        jLabel5.setMaximumSize(new java.awt.Dimension(36, 25));
        jLabel5.setMinimumSize(new java.awt.Dimension(36, 25));
        jLabel5.setPreferredSize(new java.awt.Dimension(36, 25));
        jPanel9.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        jPanel10.setLayout(new java.awt.BorderLayout());

        evaluate.setText("Evaluate");
        evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateActionPerformed(evt);
            }
        });
        jPanel10.add(evaluate, java.awt.BorderLayout.LINE_END);

        jLabel4.setText("Output:");
        jPanel10.add(jLabel4, java.awt.BorderLayout.LINE_START);

        jPanel7.setLayout(new java.awt.BorderLayout());

        buttonGroup1.add(eachSeparately);
        eachSeparately.setSelected(true);
        eachSeparately.setText("Evaluate each line separately");
        eachSeparately.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eachSeparately.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel7.add(eachSeparately, java.awt.BorderLayout.CENTER);

        buttonGroup1.add(wholeInput);
        wholeInput.setText("Evaluate the whole input at once");
        wholeInput.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wholeInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel7.add(wholeInput, java.awt.BorderLayout.LINE_END);

        jPanel10.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel10, java.awt.BorderLayout.PAGE_END);

        inputScroll.setMinimumSize(new java.awt.Dimension(200, 200));
        inputScroll.setPreferredSize(new java.awt.Dimension(223, 200));

        input.setColumns(20);
        input.setFont(new java.awt.Font("Monospaced", 0, 12));
        input.setRows(5);
        input.setMargin(new java.awt.Insets(3, 3, 3, 3));
        inputScroll.setViewportView(input);

        jPanel9.add(inputScroll, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel9);

        jPanel6.setLayout(new java.awt.BorderLayout());

        outputScroll.setMinimumSize(new java.awt.Dimension(200, 200));
        outputScroll.setPreferredSize(new java.awt.Dimension(223, 200));

        output.setBackground(new java.awt.Color(252, 252, 252));
        output.setColumns(20);
        output.setEditable(false);
        output.setRows(5);
        output.setMargin(new java.awt.Insets(3, 3, 3, 3));
        outputScroll.setViewportView(output);

        jPanel6.add(outputScroll, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel6);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exampleLanguageListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_exampleLanguageListValueChanged
    if (!evt.getValueIsAdjusting()) {
        String newsel = exampleLanguageList.getSelectedValue().toString();
        if (!newsel.equals(sel)) {
            sel = newsel;
            languageDescription.setText(readText(newsel+".txt"));
            languageDescription.setCaretPosition(0);
            if (sel.equals("SimpleArithmeticExpression")) {
                parser = genParser(Expression.class);
            }
            if (sel.equals("CanvasDraw")) {
                parser = genParser(CanvasDraw.class);
            }
            if (sel.equals("ImperativeArithmetic")) {
                parser = genParser(ImperativeArithmetic.class);
            }
            if (sel.equals("GraphDraw3D")) {
                parser = genParser(Scene.class);
            }
        }
    }
}//GEN-LAST:event_exampleLanguageListValueChanged

private void evaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateActionPerformed
    List<String> inputs = new ArrayList<String>();;
    if (eachSeparately.isSelected()) {
        String str;
        BufferedReader reader = new BufferedReader(new StringReader(input.getText()));
        try {
            while ((str = reader.readLine()) != null) {
              if (str.length() > 0) {
                  if (!str.trim().equals(""))
                      inputs.add(str);
              }
            }
        } catch(Exception e) {
            outputln("CRITICAL ERROR: "+e.getMessage());
        }
    }
    else {
        inputs.add(input.getText());
    }

    for (int i = 0;i < inputs.size();i++) {
        String inp = inputs.get(i);
        if (sel.equals("SimpleArithmeticExpression")) {
            Expression exp = (Expression) parser.parse(inp);
            if (exp == null)
                outputln("null");
            else
                outputln(""+exp.eval());
        }
        else if (sel.equals("CanvasDraw")) {
            CanvasDraw cd = (CanvasDraw) parser.parse(inp);
            
            if (cd == null)
                outputln("null");
            else {
                JFrame jw = new JFrame("CanvasDraw");
                jw.setResizable(false);
                jw.setSize(cd.getSize());
                Container pane = jw.getContentPane();
                pane.add(cd, BorderLayout.CENTER);
                cd.setVisible(true);
                jw.setVisible(true);
            }
        }
        else if (sel.equals("ImperativeArithmetic")) {
            ImperativeArithmetic imp = (ImperativeArithmetic) parser.parse(inp);
            if (imp == null)
                outputln("null");
            else
                outputln(imp.run());
        }
        else if (sel.equals("GraphDraw3D")) {
            //System.out.println("Results: "+parser.parseAll(inp).size());
            Scene imp = (Scene) parser.parse(inp);
            if (imp == null)
                outputln("null");
            else {
                try {
                    DisplayWrapper dw = new DisplayWrapper(imp);
                    dw.run();
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
    }
}//GEN-LAST:event_evaluateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton eachSeparately;
    private javax.swing.JButton evaluate;
    private javax.swing.JList exampleLanguageList;
    private javax.swing.JTextArea input;
    private javax.swing.JScrollPane inputScroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JEditorPane languageDescription;
    private javax.swing.JTextArea output;
    private javax.swing.JScrollPane outputScroll;
    private javax.swing.JRadioButton wholeInput;
    // End of variables declaration//GEN-END:variables
    private String sel;
    private Parser parser;
    
    
    private void output(String toString) {
        output.append(toString);
        output.setCaretPosition(output.getText().length());
    }

    private void outputln(String toString) {
        output.append(toString+"\n");
        output.setCaretPosition(output.getText().length());
    }
    
    private String readText(String resourceName) {
        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("org/modelcc/examples/test/"+resourceName);
        if (is != null) {
            Writer writer = new StringWriter();

            char[] buffer = new char[1024];
            try {
                Reader reader = new BufferedReader(
                        new InputStreamReader(is, "UTF-8"));
                int n;
                while ((n = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, n);
                }
            } catch (Exception e) {
            } finally {
                try {
                    is.close();
                } catch (Exception ex) {
                }
            }
            return writer.toString();
        } else {        
            return "";
        }
    }

    private Parser genParser(Class a) {
        outputln("Generating parser for "+a.getName()+".");
        Parser parser = null;
        try {
            ModelReader jmr = new JavaModelReader(a);
            Model m = jmr.read();
            Set<PatternRecognizer> ignore = new HashSet<PatternRecognizer>();
            ignore.add(new RegExpPatternRecognizer("[\r \n\t]+"));
            ignore.add(new RegExpPatternRecognizer("%[^\n]*(\n|$)"));
            parser = ParserFactory.create(m,ignore);
        } catch (Exception ex) {
            outputln("CRITICAL ERROR: "+ex.getMessage());
        } 
        outputln("Parser generated.");
        outputln("");
        return parser;
    }
}
